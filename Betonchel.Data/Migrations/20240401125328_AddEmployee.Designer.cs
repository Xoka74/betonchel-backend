// <auto-generated />
using System;
using Betonchel.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Betonchel.Data.Migrations
{
    [DbContext(typeof(BetonchelContext))]
    [Migration("20240401125328_AddEmployee")]
    partial class AddEmployee
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Betonchel.Domain.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationCreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("ConcreteGradeId")
                        .HasColumnType("integer");

                    b.Property<int>("ConcretePumpId")
                        .HasColumnType("integer");

                    b.Property<string>("ContactData")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("json");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<float>("Volume")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ConcreteGradeId")
                        .IsUnique();

                    b.HasIndex("ConcretePumpId")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.ToTable("Applications");

                    b.HasCheckConstraint("DeliveryDate", "DeliveryDate > now()");

                    b.HasCheckConstraint("TotalPrice", "TotalPrice >= 0");

                    b.HasCheckConstraint("Volume", "Volume >= 0");
                });

            modelBuilder.Entity("Betonchel.Domain.Models.ConcreteGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("FrostResistanceTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<double>("PricePerCubicMeter")
                        .HasColumnType("double precision");

                    b.Property<int>("WaterproofTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FrostResistanceTypeId")
                        .IsUnique();

                    b.HasIndex("WaterproofTypeId")
                        .IsUnique();

                    b.ToTable("ConcreteGrades");

                    b.HasCheckConstraint("PricePerCubicMeter", "PricePerCubicMeter >= 0");
                });

            modelBuilder.Entity("Betonchel.Domain.Models.ConcretePump", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("MaximumCapacity")
                        .HasColumnType("real");

                    b.Property<float?>("PipeLength")
                        .HasColumnType("real");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("ConcretePumps");

                    b.HasCheckConstraint("MaximumCapacity", "MaximumCapacity >= 0");

                    b.HasCheckConstraint("PipeLength", "PipeLength >= 0");

                    b.HasCheckConstraint("PricePerHour", "PricePerHour >= 0");
                });

            modelBuilder.Entity("Betonchel.Domain.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactData")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<int>("EmployeeGrade")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Betonchel.Domain.Models.FrostResistanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("FrostResistanceTypes");
                });

            modelBuilder.Entity("Betonchel.Domain.Models.WaterproofType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("WaterproofTypes");
                });

            modelBuilder.Entity("Betonchel.Domain.Models.Application", b =>
                {
                    b.HasOne("Betonchel.Domain.Models.ConcreteGrade", "ConcreteGrade")
                        .WithOne("Application")
                        .HasForeignKey("Betonchel.Domain.Models.Application", "ConcreteGradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Betonchel.Domain.Models.ConcretePump", "ConcretePump")
                        .WithOne("Application")
                        .HasForeignKey("Betonchel.Domain.Models.Application", "ConcretePumpId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Betonchel.Domain.Models.Employee", "Employee")
                        .WithMany("Application")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConcreteGrade");

                    b.Navigation("ConcretePump");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Betonchel.Domain.Models.ConcreteGrade", b =>
                {
                    b.HasOne("Betonchel.Domain.Models.FrostResistanceType", "FrostResistanceType")
                        .WithOne("ConcreteGrade")
                        .HasForeignKey("Betonchel.Domain.Models.ConcreteGrade", "FrostResistanceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Betonchel.Domain.Models.WaterproofType", "WaterproofType")
                        .WithOne("ConcreteGrade")
                        .HasForeignKey("Betonchel.Domain.Models.ConcreteGrade", "WaterproofTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FrostResistanceType");

                    b.Navigation("WaterproofType");
                });

            modelBuilder.Entity("Betonchel.Domain.Models.ConcreteGrade", b =>
                {
                    b.Navigation("Application")
                        .IsRequired();
                });

            modelBuilder.Entity("Betonchel.Domain.Models.ConcretePump", b =>
                {
                    b.Navigation("Application")
                        .IsRequired();
                });

            modelBuilder.Entity("Betonchel.Domain.Models.Employee", b =>
                {
                    b.Navigation("Application");
                });

            modelBuilder.Entity("Betonchel.Domain.Models.FrostResistanceType", b =>
                {
                    b.Navigation("ConcreteGrade")
                        .IsRequired();
                });

            modelBuilder.Entity("Betonchel.Domain.Models.WaterproofType", b =>
                {
                    b.Navigation("ConcreteGrade")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
